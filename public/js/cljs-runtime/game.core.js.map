{"version":3,"sources":["game/core.cljs"],"mappings":";;;AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAIL,AAAKC,AAAM,AAAA,AAAA,AAAA,AAAA,AAACC,AAAgBF;AAG5B,AAAA,AAAMG,AAAaC;AAAnB,AACE,AAAAC,AAAC,AAAA,AAAA,AAAAC,AAAUL;AAAX,AAAA,AAAAI,AAAAA,AAAAA,AAAkBD,AAAAA;;AAEpB,AAAA,AAAAG,AAAMG;AAAN,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAmBG;AAAnB,AAAAF,AAAAD,AAAA,AAAA,AAAsBI;AAAtB,AAAAH,AAAAD,AAAA,AAAA,AAAyBK;AAAzB,AACE,AAAMC,AAAO,AAACX,AAAYQ;AACpBI,AAAO,AAACZ,AAAYS;AACpBI,AAAO,AAACb,AAAYU;AAF1B,AAGE,AAAM,AAACI,AAAEH,AAAOC,AAAOC;AAAvB,AACEF;;AADF;;;AAGJ,AAAA,AAAMI;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC;AAAN,AAQE,AAAA,AAAAC,AAAAC,AAACC;AAAD,AACE,AAAAC,AAA0B,AAAAF,AAACX;AAA3B,AAAA,AAAAa;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAACC,AAAQD;;AADX;;AADF,AAICL;;AAEL,AAAA,AAAMO;AAAN,AACE,AAAAC,AAAI,AAACT;AAAL,AAAA,AAAAS;AAAAA;;AAAa,AAACC,AAAOzB,AAAY,AAAA,AAAC0B;;;AAEpC,AAAA,AAAMC;AAAN,AAAmB,AAAA,AAAA,AAAAxB,AAAQL;;AAE3B,AAAA,AAAM8B;AAAN,AACE,AAAI,AAAA,AAACC,AAAE,AAAA,AAAA,AAAA1B,AAAQL;AAAf;;AAAA;;;AAIF,AAAA,AAAMgC;AAAN,AACEjC;;AAEF,AAAA,AAAMkC,AAAaC;AAAnB,AACE,AAAM,AAACT;AAAP,AACE,AAAA,AAAA,AAACU,AAAMnC,AAAMoC,AAAoBJ;;AADnC;;AAEA,AAAU,AAAC9B,AAAYgC;AAAvB;;AAAA,AACE,AAAA,AAAA,AAACC,AAAMnC,AAAMoC,AAAmBF,AAAGL;;AACnC,AAAA,AAAA,AAACM,AAAMnC,AAAMoC,AAAkBN;;;AAEnC,AAAA,AAAMO,AAAQH;AAAd,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAC8B,AAACD,AAAYC;AAAI,AAAAI,AAAC,AAAA,AAAA,AAAAjC,AAAUL;AAAX,AAAA,AAAAsC,AAAAA,AAAAA,AAAkBJ,AAAAA;;;AAEjE,AAAA,AAAMK;AAAN,AACE,AAAI,AAACd;AACH,AAAMF,AAAe,AAACN;AAAtB,AACE,AAAIM;AACF,AAAA,AAAgBA;;AAChB;;;AACJ,AAAA,AAAqB,AAAA,AAAA,AAAAlB,AAAQL;;;AAEjC,AAAA,AAAMwC;AAAN,AACE,AAAMC,AAAO,AAACF;AAAd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEgBE,AAEXJ,AACAA,AACAA,AAEAA,AACAA,AACAA,AAEAA,AACAA,AACAA;;AAEP,AAAA,AAAeK;AAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGKF;;;AAIL,AAAA,AAAuBG;AAAvB,AAEE,AAAA,AAACC,AACCF,AACD,AAAA,AAAiBG;;AAEpB,AAAA,AAAMC;AAAN,AACE,AAACH","names":["game.core/initial-owners","game.core/state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","game.core/place-owner","p","fexpr__34848","cljs.core/deref","p__34852","vec__34854","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","game.core/line-owner","p1","p2","p3","owner1","owner2","owner3","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic","game.core/winner","possible-lines","p1__34862#","p2__34861#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","temp__5735__auto__","winning-player","cljs.core/reduced","game.core/game-over","or__4185__auto__","cljs.core/every?","cljs.core.range.cljs$core$IFn$_invoke$arity$1","game.core/new-owner","game.core/new-turn","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","game.core/reset-owners","game.core/handle-turn","i","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update-in","game.core/square","fexpr__34887","game.core/get-status","game.core/board","status","game.core/game","game.core/start","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document","game.core/init"],"sourcesContent":["(ns game.core\r\n  (:require [reagent.core :as r]))\r\n\r\n(def initial-owners [nil nil nil\r\n                     nil nil nil\r\n                     nil nil nil] )\r\n\r\n(def state (r/atom {:owners initial-owners\r\n                    :turn \"X\"}))\r\n\r\n(defn place-owner [p]\r\n  ((:owners @state) p))\r\n\r\n(defn line-owner [[p1 p2 p3]]\r\n  (let [owner1 (place-owner p1)\r\n        owner2 (place-owner p2)\r\n        owner3 (place-owner p3)]\r\n    (when (= owner1 owner2 owner3)\r\n      owner1)))\r\n\r\n(defn winner []\r\n  (let [possible-lines [[0 1 2]\r\n                        [3 4 5]\r\n                        [6 7 8]\r\n                        [0 3 6]\r\n                        [1 4 7]\r\n                        [2 5 8]\r\n                        [0 4 8]\r\n                        [2 4 6]]]\r\n    (reduce\r\n     #(when-let [winning-player (line-owner %2)]\r\n        (reduced winning-player))\r\n     nil\r\n     possible-lines)))\r\n\r\n(defn game-over []\r\n  (or (winner) (every? place-owner (range 9))))\r\n\r\n(defn new-owner [] (:turn @state))\r\n\r\n(defn new-turn []\r\n  (if (= (:turn @state) \"X\")\r\n    \"O\"\r\n    \"X\"))\r\n\r\n(defn reset-owners []\r\n  initial-owners)\r\n\r\n(defn handle-turn [i]\r\n  (when (game-over)\r\n    (swap! state update-in [:owners] reset-owners))\r\n  (when-not (place-owner i)\r\n    (swap! state update-in [:owners i] new-owner)\r\n    (swap! state update-in [:turn] new-turn)))\r\n\r\n(defn square [i]\r\n  [:button.square {:on-click #(handle-turn i)} ((:owners @state) i)])\r\n\r\n(defn get-status []\r\n  (if (game-over)\r\n    (let [winning-player (winner)]\r\n      (if winning-player\r\n        (str \"Winner: \" winning-player)\r\n        (str \"Draw\")))\r\n    (str \"Next player: \" (:turn @state))))\r\n\r\n(defn board []\r\n  (let [status (get-status)]\r\n    [:<>\r\n     [:div.status status]\r\n     [:div.board-row\r\n      [square 0]\r\n      [square 1]\r\n      [square 2]]\r\n     [:div.board-row\r\n      [square 3]\r\n      [square 4]\r\n      [square 5]]\r\n     [:div.board-row\r\n      [square 6]\r\n      [square 7]\r\n      [square 8]]]))\r\n\r\n(defn ^:export game []\r\n  [:div.game\r\n   [:div.game-board\r\n    [board]]\r\n   [:div.game-info\r\n    [:div] [:ol]]])\r\n\r\n(defn ^:dev/after-load start\r\n  []\r\n  (r/render\r\n   [game]\r\n   (.getElementById js/document \"app\")))\r\n\r\n(defn init []\r\n  (start))\r\n"]}